/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/spotifynt.js":
/*!***********************************!*\
  !*** ./resources/js/spotifynt.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var fast_average_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-average-color */ \"./node_modules/fast-average-color/dist/index.esm.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function (_e2) { function e(_x) { return _e2.apply(this, arguments); } e.toString = function () { return _e2.toString(); }; return e; }(function (e) { throw e; }), f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function (_e3) { function e(_x2) { return _e3.apply(this, arguments); } e.toString = function () { return _e3.toString(); }; return e; }(function (e) { didErr = true; err = e; }), f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\nwindow.Lists = new function () {\n  this.store = function (list, items) {\n    sessionStorage.setItem('list-' + list, JSON.stringify(items));\n  };\n\n  this.clear = function (list) {\n    sessionStorage.setItem('list-' + list, JSON.stringify([]));\n  };\n\n  this.appendOrStore = function (list, items) {\n    if (Lists.get(list)) {\n      Lists.append(list, items);\n    } else {\n      Lists.store(list, items);\n    }\n  };\n\n  this.removeDuplicates = function (list) {\n    var items = Lists.get(list);\n    items = items.reduce(function (a, b) {\n      if (a.indexOf(b) < 0) a.push(b);\n      return a;\n    }, []);\n    Lists.store(list, items);\n  };\n\n  this.append = function (list, songs) {\n    var items = Lists.get(list);\n    items = items.concat(songs);\n    sessionStorage.setItem('list-' + list, JSON.stringify(items));\n  };\n\n  this.merge = function (lista, listb) {\n    var itemsa = Lists.get(lista);\n    var itemsb = Lists.get(listb);\n    itemsa = itemsa.concat(itemsb);\n    sessionStorage.setItem('list-' + lista, JSON.stringify(itemsa));\n  };\n\n  this.shuffle = function (list) {\n    var items = JSON.parse(sessionStorage.getItem('list-' + list));\n\n    for (var i = items.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = items[i];\n      items[i] = items[j];\n      items[j] = temp;\n    }\n\n    sessionStorage.setItem('list-' + list, JSON.stringify(items));\n    return this;\n  };\n\n  this.get = function (list) {\n    try {\n      return JSON.parse(sessionStorage.getItem('list-' + list));\n    } catch (_unused) {\n      return false;\n    }\n  };\n}();\nwindow.Spotifynt = new function () {\n  var port = \"8337\";\n  var url = \"http://localhost\";\n  this.player = new function () {\n    this.show = function (song) {\n      document.querySelector(\"#audio-player\").src = Spotifynt.command.fileUrl(song.id);\n      document.querySelector(\"#text-songTitle\").textContent = song.title;\n      document.querySelector(\"#text-songArtist\").textContent = song.artist;\n      document.querySelector(\"#img-songArt\").src = Spotifynt.command.artUrl(song.album_id);\n      document.querySelector(\"#row-player\").hidden = false;\n      Spotifynt.metadata.set(song, Spotifynt.command.artUrl(song.album_id));\n      Spotifynt.displayPlayer(true);\n      var fac = new fast_average_color__WEBPACK_IMPORTED_MODULE_0__.default();\n      fac.getColorAsync(document.querySelector(\"#img-songArt\").src).then(function (color) {\n        document.querySelector(\"#app\").style.backgroundColor = color.hex + \"99\";\n        document.querySelector(\"meta[name='theme-color'\").content = color.hex;\n      })[\"catch\"](function (e) {\n        return console.log(e);\n      });\n    };\n  }();\n  this.playlist = new function () {\n    function get() {\n      var playlist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"playlist-actual\";\n      return Lists.get(playlist);\n    }\n\n    this[\"new\"] = function (playlist, songs) {\n      var items = [];\n\n      var _iterator = _createForOfIteratorHelper(songs),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var song = _step.value;\n          items.push(song.id);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      Lists.clear(playlist);\n      Lists.store(playlist, items);\n      Lists.removeDuplicates(playlist);\n      return this;\n    };\n\n    this.load = function (songs) {\n      var random = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var playlist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"playlist-actual\";\n\n      if (random) {\n        Lists.shuffle(songs);\n      }\n\n      Lists.appendOrStore(playlist, get(songs));\n      Lists.removeDuplicates(playlist);\n      return this;\n    };\n\n    this.clear = function () {\n      var playlist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"playlist-actual\";\n      Lists.clear(playlist);\n      return this;\n    };\n\n    this.play = function () {\n      var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var playlist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"playlist-actual\";\n\n      if (i === false) {\n        i = parseInt(sessionStorage.getItem(\"playlist-actual-i\"));\n      }\n\n      sessionStorage.setItem(\"playlist-actual-i\", i);\n      Spotifynt.command.item(get(playlist)[i]).then(function (song) {\n        Spotifynt.player.show(song);\n        Spotifynt.player_playpause(\"play\");\n      });\n    };\n\n    this.move = function (i) {\n      var playlist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"playlist-actual\";\n      var length = get(playlist).length;\n      var actual = parseInt(sessionStorage.getItem(\"playlist-actual-i\"));\n      var nuevo = ((actual + i) % length + length) % length;\n      sessionStorage.setItem(\"playlist-actual-i\", nuevo);\n      return this;\n    };\n  }();\n  this.metadata = new function () {\n    this.set = function (item, image) {\n      navigator.mediaSession.metadata = new MediaMetadata({\n        title: item.title,\n        artist: item.artist,\n        album: item.album,\n        artwork: [{\n          src: image,\n          sizes: '512x512',\n          type: 'image/png'\n        }]\n      });\n    };\n  }();\n  this.command = new function () {\n    this.getAlbumSongs = function (id) {\n      return command(\"album/\".concat(id, \"?expand\"));\n    };\n\n    this.item = function (id) {\n      return command(\"item/\".concat(id));\n    };\n\n    this.querySong = function (query) {\n      return command(\"item/query/\".concat(query));\n    };\n\n    this.queryAlbum = function (query) {\n      return command(\"album/query/\".concat(query));\n    };\n\n    this.artUrl = function (id) {\n      return \"\".concat(url, \":\").concat(port, \"/album/\").concat(id, \"/art\");\n    };\n\n    this.fileUrl = function (id) {\n      return \"\".concat(url, \":\").concat(port, \"/item/\").concat(id, \"/file\");\n    };\n\n    function command(arg) {\n      return fetch(\"\".concat(url, \":\").concat(port, \"/\").concat(arg), {\n        method: 'GET'\n      }).then(function (response) {\n        return response.json();\n      });\n    }\n  }();\n\n  this.search = function (query) {\n    this.command.querySong(query).then(function (response) {\n      var results = response.results;\n      show_songs(results, 'search');\n      Spotifynt.playlist[\"new\"]('search', results);\n    })[\"catch\"](function (err) {\n      return console.error(err);\n    });\n    this.command.queryAlbum(query).then(function (response) {\n      var results = response.results;\n      show_albums(results);\n    })[\"catch\"](function (err) {\n      return console.error(err);\n    });\n  };\n\n  this.show_info = function () {\n    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var list = sessionStorage.getItem(\"list_showing\");\n    var song_id = JSON.parse(sessionStorage.getItem(\"list-\".concat(list)))[item];\n    beet_getItem(song_id).then(function (song) {\n      document.querySelector(\"#modal-infoBody\").innerHTML = \"\";\n\n      for (e in song) {\n        p = document.createElement(\"p\");\n        p.innerHTML = \"<b>\".concat(e, \"</b>: \").concat(song[e]);\n        document.querySelector(\"#modal-infoBody\").appendChild(p);\n      }\n\n      document.querySelector(\"#modal-infoTitle\").textContent = song.title;\n      $('#modal-info').modal('show');\n    });\n  };\n\n  this.getAlbumSongs = function (id) {\n    return Spotifynt.command.getAlbumSongs(id);\n  };\n\n  function show_albums(albums) {\n    var l = document.querySelector(\"#div-albumResults\");\n    l.innerHTML = \"\";\n\n    var _iterator2 = _createForOfIteratorHelper(albums.entries()),\n        _step2;\n\n    try {\n      var _loop = function _loop() {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n            i = _step2$value[0],\n            album = _step2$value[1];\n\n        var t = document.querySelector(\"#template-albumResult\").cloneNode(true).content;\n        t.querySelector(\"[data-album='title']\").textContent = \"\".concat(album.album);\n        t.querySelector(\"[data-album='artist']\").textContent = \"\".concat(album.albumartist);\n        t.querySelector(\"[data-album='art']\").src = Spotifynt.command.artUrl(album.id);\n        t.querySelector(\"[data-album='append']\").addEventListener(\"click\", function () {\n          Spotifynt.getAlbumSongs(album.id).then(function (songs) {\n            return Spotifynt.playlist[\"new\"](\"album-\".concat(album.id), songs.items).load(\"album-\".concat(album.id));\n          });\n        });\n        t.querySelector(\"[data-album='play']\").addEventListener(\"click\", function () {\n          Spotifynt.getAlbumSongs(album.id).then(function (songs) {\n            Spotifynt.playlist[\"new\"](\"album-\".concat(album.id), songs.items).clear().load(\"album-\".concat(album.id)).play(0);\n          });\n        }); //t.querySelector(\".list-song-info\").onclick = () => show_info(i);\n        //if (song.format === \"FLAC\"){\n        //t.querySelector(\".list-song-title\").classList.add('mdi')\n        //t.querySelector(\".list-song-title\").classList.add('mdi-quality-high')\n        //}\n\n        l.appendChild(t);\n      };\n\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    Spotifynt.displayAlbumResults(true);\n  }\n\n  function show_songs(songs, list) {\n    sessionStorage.setItem(\"list_showing\", list); //document.querySelector(\"#row-songResults\").hidden = false;\n\n    var l = document.querySelector(\"#div-songResults\");\n    l.innerHTML = \"\";\n\n    var _iterator3 = _createForOfIteratorHelper(songs.entries()),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n            i = _step3$value[0],\n            song = _step3$value[1];\n\n        var t = document.querySelector(\"#template-songResult\").cloneNode(true).content;\n        t.querySelector(\"[data-song='title']\").textContent = \"\".concat(song.title);\n        t.querySelector(\"[data-song='artist']\").textContent = \"\".concat(song.artist); //t.querySelector(\".list-song-album\").textContent = `${song.album}`\n        //t.querySelector(\".list-song-play\").onclick = () => btn_play(i);\n        //t.querySelector(\".list-song-info\").onclick = () => show_info(i);\n        //if (song.format === \"FLAC\"){\n        //t.querySelector(\".list-song-title\").classList.add('mdi')\n        //t.querySelector(\".list-song-title\").classList.add('mdi-quality-high')\n        //}\n\n        l.appendChild(t);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    Spotifynt.displaySongResults(true);\n  }\n\n  this.btn_play = function (i) {\n    var list = sessionStorage.getItem(\"list_showing\");\n    list.clear('playlist');\n    list.merge('playlist', list);\n    playlist_play(i);\n  };\n\n  this.player_playpause = function () {\n    var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    var player = document.querySelector(\"#audio-player\");\n\n    if (player.paused || action === \"play\") {\n      sessionStorage.setItem(\"player_playing\", 'playing');\n      document.querySelector(\"#icon-pause\").hidden = false;\n      document.querySelector(\"#icon-play\").hidden = true;\n      player.play();\n    } else if (!player.paused || action === \"pause\") {\n      sessionStorage.setItem(\"player_playing\", 'paused');\n      document.querySelector(\"#icon-play\").hidden = false;\n      document.querySelector(\"#icon-pause\").hidden = true;\n      player.pause();\n    }\n  };\n\n  this.displaySongResults = function (e) {\n    document.querySelector(\"#row-songResults\").hidden = !e;\n  };\n\n  this.displayAlbumResults = function (e) {\n    document.querySelector(\"#row-albumResults\").hidden = !e;\n  };\n\n  this.displayPlayer = function (e) {\n    document.querySelector(\"#row-player\").hidden = !e;\n  };\n}();\nnavigator.mediaSession.setActionHandler('play', function () {\n  return Spotifynt.player_playpause('play');\n});\nnavigator.mediaSession.setActionHandler('pause', function () {\n  return Spotifynt.player_playpause('pause');\n});\nnavigator.mediaSession.setActionHandler('previoustrack', function () {\n  return Spotifynt.playlist.move(-1).play();\n});\nnavigator.mediaSession.setActionHandler('nexttrack', function () {\n  return Spotifynt.playlist.move(1).play();\n});\ndocument.querySelector('#input-search').addEventListener('change', function (e) {\n  return Spotifynt.search(e.target.value);\n});\ndocument.querySelector(\"#audio-player\").addEventListener('ended', function () {\n  return Spotifynt.playlist.move(1).play();\n});\ndocument.querySelector(\"#btn-nextSong\").addEventListener('click', function () {\n  return Spotifynt.playlist.move(1).play();\n});\ndocument.querySelector(\"#btn-prevSong\").addEventListener('click', function () {\n  return Spotifynt.playlist.move(-1).play();\n});\ndocument.querySelector(\"#btn-playpause\").addEventListener('click', function () {\n  return Spotifynt.player_playpause();\n});\ndocument.querySelector(\"#btn-playPlaylist\").addEventListener('click', function () {\n  Spotifynt.playlist.clear().load(\"search\", true).play(0);\n});\ndocument.querySelector(\"#btn-appendPlaylist\").addEventListener('click', function () {\n  Spotifynt.playlist.load(\"search\");\n});\nwindow.addEventListener('beforeunload', function (e) {\n  e.preventDefault();\n  e.returnValue = '';\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/spotifynt.js\n");

/***/ }),

/***/ "./node_modules/fast-average-color/dist/index.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/fast-average-color/dist/index.esm.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/*! Fast Average Color | © 2021 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n    const str = num.toString(16);\n\n    return str.length === 1 ? '0' + str : str;\n}\n\nfunction arrayToHex(arr) {\n    return '#' + arr.map(toHex).join('');\n}\n\nfunction isDark(color) {\n    // http://www.w3.org/TR/AERT#color-contrast\n    const result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n\n    return result < 128;\n}\n\nfunction prepareIgnoredColor(color) {\n    if (!color) { return color; }\n\n    if (Array.isArray(color)) {\n        return typeof color[0] === 'number' ? [color.slice()] : color;\n    }\n\n    return [color];\n}\n\nfunction isIgnoredColor(data, index, ignoredColor) {\n    for (let i = 0; i < ignoredColor.length; i++) {\n        if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n    switch (ignoredColor.length) {\n        case 3:\n            // [red, green, blue]\n            if (isIgnoredRGBColor(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        case 4:\n            // [red, green, blue, alpha]\n            if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        case 5:\n            // [red, green, blue, alpha, threshold]\n            if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        default:\n            return false;\n    }\n}\n\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n    // Ignore if the pixel are transparent.\n    if (data[index + 3] !== 255) {\n        return true;\n    }\n\n    if (data[index] === ignoredColor[0] &&\n        data[index + 1] === ignoredColor[1] &&\n        data[index + 2] === ignoredColor[2]\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n    if (data[index + 3] && ignoredColor[3]) {\n        return data[index] === ignoredColor[0] &&\n            data[index + 1] === ignoredColor[1] &&\n            data[index + 2] === ignoredColor[2] &&\n            data[index + 3] === ignoredColor[3];\n    }\n\n    // Ignore rgb components if the pixel are fully transparent.\n    return data[index + 3] === ignoredColor[3];\n}\n\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n    return colorComponent >= (ignoredColorComponent - value) &&\n        colorComponent <= (ignoredColorComponent + value);\n}\n\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n    const redIgnored = ignoredColor[0];\n    const greenIgnored = ignoredColor[1];\n    const blueIgnored = ignoredColor[2];\n    const alphaIgnored = ignoredColor[3];\n    const threshold = ignoredColor[4];\n    const alphaData = data[index + 3];\n\n    const alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n    if (!alphaIgnored) {\n        return alphaInRange;\n    }\n\n    if (!alphaData && alphaInRange) {\n        return true;\n    }\n\n    if (inRange(data[index], redIgnored, threshold) &&\n        inRange(data[index + 1], greenIgnored, threshold) &&\n        inRange(data[index + 2], blueIgnored, threshold) &&\n        alphaInRange\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction dominantAlgorithm(arr, len, options) {\n    const colorHash = {};\n    const divider = 24;\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n    let max = [0, 0, 0, 0, 0];\n    \n    for (let i = 0; i < len; i += step) {\n        const red = arr[i];\n        const green = arr[i + 1];\n        const blue = arr[i + 2];\n        const alpha = arr[i + 3];\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        const key = Math.round(red / divider) + ',' +\n                Math.round(green / divider) + ',' +\n                Math.round(blue / divider);\n\n        if (colorHash[key]) {\n            colorHash[key] = [\n                colorHash[key][0] + red * alpha,\n                colorHash[key][1] + green * alpha,\n                colorHash[key][2] + blue * alpha,\n                colorHash[key][3] + alpha,\n                colorHash[key][4] + 1\n            ];\n        } else {\n            colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n        }\n        \n        if (max[4] < colorHash[key][4]) {\n            max = colorHash[key];\n        }\n    }\n\n    const redTotal = max[0];\n    const greenTotal = max[1];\n    const blueTotal = max[2];\n\n    const alphaTotal = max[3];\n    const count = max[4];\n\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction simpleAlgorithm(arr, len, options) {\n    let redTotal = 0;\n    let greenTotal = 0;\n    let blueTotal = 0;\n    let alphaTotal = 0;\n    let count = 0;\n\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n\n    for (let i = 0; i < len; i += step) {\n        const alpha = arr[i + 3];\n        const red = arr[i] * alpha;\n        const green = arr[i + 1] * alpha;\n        const blue = arr[i + 2] * alpha;\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        redTotal += red;\n        greenTotal += green;\n        blueTotal += blue;\n        alphaTotal += alpha;\n\n        count++;\n    }\n\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction sqrtAlgorithm(arr, len, options) {\n    let redTotal = 0;\n    let greenTotal = 0;\n    let blueTotal = 0;\n    let alphaTotal = 0;\n    let count = 0;\n\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n\n    for (let i = 0; i < len; i += step) {\n        const red = arr[i];\n        const green = arr[i + 1];\n        const blue = arr[i + 2];\n        const alpha = arr[i + 3];\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        redTotal += red * red * alpha;\n        greenTotal += green * green * alpha;\n        blueTotal += blue * blue * alpha;\n        alphaTotal += alpha;\n\n        count++;\n    }\n\n    return alphaTotal ? [\n        Math.round(Math.sqrt(redTotal / alphaTotal)),\n        Math.round(Math.sqrt(greenTotal / alphaTotal)),\n        Math.round(Math.sqrt(blueTotal / alphaTotal)),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction getDefaultColor(options) {\n    return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\n\nfunction getOption(options, name, defaultValue) {\n    return typeof options[name] === 'undefined' ? defaultValue : options[name];\n}\n\nconst MIN_SIZE = 10;\nconst MAX_SIZE = 100;\n\nfunction isSvg(filename) {\n    return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\n\nfunction getOriginalSize(resource) {\n    if (resource instanceof HTMLImageElement) {\n        let width = resource.naturalWidth;\n        let height = resource.naturalHeight;\n\n        // For SVG images with only viewBox attr.\n        if (!resource.naturalWidth && isSvg(resource.src)) {\n            width = height = MAX_SIZE;\n        }\n\n        return {\n            width,\n            height,\n        };\n    }\n\n    if (resource instanceof HTMLVideoElement) {\n        return {\n            width: resource.videoWidth,\n            height: resource.videoHeight\n        };\n    }\n\n    return {\n        width: resource.width,\n        height: resource.height\n    };\n}\n\nfunction prepareSizeAndPosition(originalSize, options) {\n    const srcLeft = getOption(options, 'left', 0);\n    const srcTop = getOption(options, 'top', 0);\n    const srcWidth = getOption(options, 'width', originalSize.width);\n    const srcHeight = getOption(options, 'height', originalSize.height);\n\n    let destWidth = srcWidth;\n    let destHeight = srcHeight;\n\n    if (options.mode === 'precision') {\n        return {\n            srcLeft,\n            srcTop,\n            srcWidth,\n            srcHeight,\n            destWidth,\n            destHeight\n        };\n    }\n\n    let factor;\n\n    if (srcWidth > srcHeight) {\n        factor = srcWidth / srcHeight;\n        destWidth = MAX_SIZE;\n        destHeight = Math.round(destWidth / factor);\n    } else {\n        factor = srcHeight / srcWidth;\n        destHeight = MAX_SIZE;\n        destWidth = Math.round(destHeight / factor);\n    }\n\n    if (\n        destWidth > srcWidth || destHeight > srcHeight ||\n        destWidth < MIN_SIZE || destHeight < MIN_SIZE\n    ) {\n        destWidth = srcWidth;\n        destHeight = srcHeight;\n    }\n\n    return {\n        srcLeft,\n        srcTop,\n        srcWidth,\n        srcHeight,\n        destWidth,\n        destHeight\n    };\n}\n\nfunction makeCanvas() {\n    return typeof window === 'undefined' ?\n        new OffscreenCanvas(1, 1) :\n        document.createElement('canvas');\n}\n\nconst ERROR_PREFIX = 'FastAverageColor: ';\n\nfunction outputError(options, text, details) {\n    if (!options.silent) {\n        console.error(ERROR_PREFIX + text);\n\n        if (details) {\n            console.error(details);\n        }\n    }\n}\n\nfunction getError(text) {\n    return Error(ERROR_PREFIX + text);\n}\n\nclass FastAverageColor {\n    /**\n     * Get asynchronously the average color from not loaded image.\n     *\n     * @param {string | HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n     * @param {FastAverageColorOptions} [options]\n     *\n     * @returns {Promise<FastAverageColorOptions>}\n     */\n    getColorAsync(resource, options) {\n        if (!resource) {\n            return Promise.reject(getError('call .getColorAsync() without resource.'));\n        }\n\n        if (typeof resource === 'string') {\n            const img = new Image();\n            img.crossOrigin = '';\n            img.src = resource;\n\n            return this._bindImageEvents(img, options);\n        } else if (resource instanceof Image && !resource.complete) {\n            return this._bindImageEvents(resource, options);\n        } else {\n            const result = this.getColor(resource, options);\n\n            return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n        }\n    }\n\n    /**\n     * Get the average color from images, videos and canvas.\n     *\n     * @param {HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n     * @param {FastAverageColorOptions} [options]\n     *\n     * @returns {FastAverageColorResult}\n     */\n    getColor(resource, options) {\n        options = options || {};\n\n        const defaultColor = getDefaultColor(options);\n\n        if (!resource) {\n            outputError(options, 'call .getColor(null) without resource.');\n\n            return this.prepareResult(defaultColor);\n        }\n\n        const originalSize = getOriginalSize(resource);\n        const size = prepareSizeAndPosition(originalSize, options);\n\n        if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n            outputError(options, `incorrect sizes for resource \"${resource.src}\".`);\n\n            return this.prepareResult(defaultColor);\n        }\n\n        if (!this._ctx) {\n            this._canvas = makeCanvas();\n            this._ctx = this._canvas.getContext && this._canvas.getContext('2d');\n\n            if (!this._ctx) {\n                outputError(options, 'Canvas Context 2D is not supported in this browser.');\n\n                return this.prepareResult(defaultColor);\n            }\n        }\n\n        this._canvas.width = size.destWidth;\n        this._canvas.height = size.destHeight;\n\n        let value = defaultColor;\n\n        try {\n            this._ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n            this._ctx.drawImage(\n                resource,\n                size.srcLeft, size.srcTop,\n                size.srcWidth, size.srcHeight,\n                0, 0,\n                size.destWidth, size.destHeight\n            );\n\n            const bitmapData = this._ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n            value = this.getColorFromArray4(bitmapData, options);\n        } catch (e) {\n            outputError(options, `security error (CORS) for resource ${resource.src}.\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image`, e);\n        }\n\n        return this.prepareResult(value);\n    }\n\n    /**\n     * Get the average color from a array when 1 pixel is 4 bytes.\n     *\n     * @param {number[]|Uint8Array|Uint8ClampedArray} arr\n     * @param {Object} [options]\n     * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n     * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n     * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n     * @param {number} [options.step=1]\n     *\n     * @returns {number[]} [red (0-255), green (0-255), blue (0-255), alpha (0-255)]\n     */\n    getColorFromArray4(arr, options) {\n        options = options || {};\n\n        const bytesPerPixel = 4;\n        const arrLength = arr.length;\n        const defaultColor = getDefaultColor(options);\n\n        if (arrLength < bytesPerPixel) {\n            return defaultColor;\n        }\n\n        const len = arrLength - arrLength % bytesPerPixel;\n        const step = (options.step || 1) * bytesPerPixel;\n\n        let algorithm;\n\n        switch (options.algorithm || 'sqrt') {\n            case 'simple':\n                algorithm = simpleAlgorithm;\n                break;\n            case 'sqrt':\n                algorithm = sqrtAlgorithm;\n                break;\n            case 'dominant':\n                algorithm = dominantAlgorithm;\n                break;\n            default:\n                throw getError(`${options.algorithm} is unknown algorithm.`);\n        }\n\n        return algorithm(arr, len, {\n            defaultColor,\n            ignoredColor: prepareIgnoredColor(options.ignoredColor),\n            step\n        });\n    }\n\n    /**\n     * Get color data from value ([r, g, b, a]).\n     *\n     * @param {number[]} value\n     *\n     * @returns {FastAverageColorResult}\n     */\n    prepareResult(value) {\n        const rgb = value.slice(0, 3);\n        const rgba = [].concat(rgb, value[3] / 255);\n        const isDarkColor = isDark(value);\n\n        return {\n            value,\n            rgb: 'rgb(' + rgb.join(',') + ')',\n            rgba: 'rgba(' + rgba.join(',') + ')',\n            hex: arrayToHex(rgb),\n            hexa: arrayToHex(value),\n            isDark: isDarkColor,\n            isLight: !isDarkColor\n        };\n    }\n\n    /**\n     * Destroy the instance.\n     */\n    destroy() {\n        delete this._canvas;\n        delete this._ctx;\n    }\n\n    _bindImageEvents(resource, options) {\n        return new Promise((resolve, reject) => {\n            const onload = () => {\n                unbindEvents();\n\n                const result = this.getColor(resource, options);\n\n                if (result.error) {\n                    reject(result.error);\n                } else {\n                    resolve(result);\n                }\n            };\n\n            const onerror = () => {\n                unbindEvents();\n\n                reject(getError(`Error loading image \"${resource.src}\".`));\n            };\n\n            const onabort = () => {\n                unbindEvents();\n\n                reject(getError(`Image \"${resource.src}\" loading aborted.`));\n            };\n\n            const unbindEvents = () => {\n                resource.removeEventListener('load', onload);\n                resource.removeEventListener('error', onerror);\n                resource.removeEventListener('abort', onabort);\n            };\n\n            resource.addEventListener('load', onload);\n            resource.addEventListener('error', onerror);\n            resource.addEventListener('abort', onabort);\n        });\n    }\n}\n\n/**\n * @typeof {Object} FastAverageColorOptions\n *\n * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n * @param {string} [options.mode=\"speed\"] \"precision\" or \"speed\"\n * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n * @param {number} [options.step=1]\n * @param {number} [options.left=0]\n * @param {number} [options.top=0]\n * @param {number} [options.width=width of resource]\n * @param {number} [options.height=height of resource]\n * @param {boolean} [options.silent] Disable error output via console.error\n */\n\n/**\n * @typedef {Object} FastAverageColorResult\n *\n * @property {string} rgba\n * @property {string} rgb\n * @property {string} hex\n * @property {string} hexa\n * @property {number[]} value\n * @property {boolean} isDark\n * @property {boolean} isLight\n * @property {Error?} error\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (FastAverageColor);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fast-average-color/dist/index.esm.js\n");

/***/ }),

/***/ "./resources/css/main.css":
/*!********************************!*\
  !*** ./resources/css/main.css ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvY3NzL21haW4uY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9jc3MvbWFpbi5jc3M/MDc2NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/css/main.css\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	!function() {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = function(result, chunkIds, fn, priority) {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var chunkIds = deferred[i][0];
/******/ 				var fn = deferred[i][1];
/******/ 				var priority = deferred[i][2];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/spotifynt": 0,
/******/ 			"css/main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) var result = runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/main"], function() { return __webpack_require__("./resources/js/spotifynt.js"); })
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/main"], function() { return __webpack_require__("./resources/css/main.css"); })
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;