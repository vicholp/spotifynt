{"version":3,"file":"/js/vendor.js","mappings":"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","sources":["webpack:///./node_modules/fast-average-color/dist/index.esm.js"],"sourcesContent":["/*! Fast Average Color | Â© 2021 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n    const str = num.toString(16);\n\n    return str.length === 1 ? '0' + str : str;\n}\n\nfunction arrayToHex(arr) {\n    return '#' + arr.map(toHex).join('');\n}\n\nfunction isDark(color) {\n    // http://www.w3.org/TR/AERT#color-contrast\n    const result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n\n    return result < 128;\n}\n\nfunction prepareIgnoredColor(color) {\n    if (!color) { return color; }\n\n    if (Array.isArray(color)) {\n        return typeof color[0] === 'number' ? [color.slice()] : color;\n    }\n\n    return [color];\n}\n\nfunction isIgnoredColor(data, index, ignoredColor) {\n    for (let i = 0; i < ignoredColor.length; i++) {\n        if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n    switch (ignoredColor.length) {\n        case 3:\n            // [red, green, blue]\n            if (isIgnoredRGBColor(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        case 4:\n            // [red, green, blue, alpha]\n            if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        case 5:\n            // [red, green, blue, alpha, threshold]\n            if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        default:\n            return false;\n    }\n}\n\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n    // Ignore if the pixel are transparent.\n    if (data[index + 3] !== 255) {\n        return true;\n    }\n\n    if (data[index] === ignoredColor[0] &&\n        data[index + 1] === ignoredColor[1] &&\n        data[index + 2] === ignoredColor[2]\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n    if (data[index + 3] && ignoredColor[3]) {\n        return data[index] === ignoredColor[0] &&\n            data[index + 1] === ignoredColor[1] &&\n            data[index + 2] === ignoredColor[2] &&\n            data[index + 3] === ignoredColor[3];\n    }\n\n    // Ignore rgb components if the pixel are fully transparent.\n    return data[index + 3] === ignoredColor[3];\n}\n\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n    return colorComponent >= (ignoredColorComponent - value) &&\n        colorComponent <= (ignoredColorComponent + value);\n}\n\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n    const redIgnored = ignoredColor[0];\n    const greenIgnored = ignoredColor[1];\n    const blueIgnored = ignoredColor[2];\n    const alphaIgnored = ignoredColor[3];\n    const threshold = ignoredColor[4];\n    const alphaData = data[index + 3];\n\n    const alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n    if (!alphaIgnored) {\n        return alphaInRange;\n    }\n\n    if (!alphaData && alphaInRange) {\n        return true;\n    }\n\n    if (inRange(data[index], redIgnored, threshold) &&\n        inRange(data[index + 1], greenIgnored, threshold) &&\n        inRange(data[index + 2], blueIgnored, threshold) &&\n        alphaInRange\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction dominantAlgorithm(arr, len, options) {\n    const colorHash = {};\n    const divider = 24;\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n    let max = [0, 0, 0, 0, 0];\n    \n    for (let i = 0; i < len; i += step) {\n        const red = arr[i];\n        const green = arr[i + 1];\n        const blue = arr[i + 2];\n        const alpha = arr[i + 3];\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        const key = Math.round(red / divider) + ',' +\n                Math.round(green / divider) + ',' +\n                Math.round(blue / divider);\n\n        if (colorHash[key]) {\n            colorHash[key] = [\n                colorHash[key][0] + red * alpha,\n                colorHash[key][1] + green * alpha,\n                colorHash[key][2] + blue * alpha,\n                colorHash[key][3] + alpha,\n                colorHash[key][4] + 1\n            ];\n        } else {\n            colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n        }\n        \n        if (max[4] < colorHash[key][4]) {\n            max = colorHash[key];\n        }\n    }\n\n    const redTotal = max[0];\n    const greenTotal = max[1];\n    const blueTotal = max[2];\n\n    const alphaTotal = max[3];\n    const count = max[4];\n\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction simpleAlgorithm(arr, len, options) {\n    let redTotal = 0;\n    let greenTotal = 0;\n    let blueTotal = 0;\n    let alphaTotal = 0;\n    let count = 0;\n\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n\n    for (let i = 0; i < len; i += step) {\n        const alpha = arr[i + 3];\n        const red = arr[i] * alpha;\n        const green = arr[i + 1] * alpha;\n        const blue = arr[i + 2] * alpha;\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        redTotal += red;\n        greenTotal += green;\n        blueTotal += blue;\n        alphaTotal += alpha;\n\n        count++;\n    }\n\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction sqrtAlgorithm(arr, len, options) {\n    let redTotal = 0;\n    let greenTotal = 0;\n    let blueTotal = 0;\n    let alphaTotal = 0;\n    let count = 0;\n\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n\n    for (let i = 0; i < len; i += step) {\n        const red = arr[i];\n        const green = arr[i + 1];\n        const blue = arr[i + 2];\n        const alpha = arr[i + 3];\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        redTotal += red * red * alpha;\n        greenTotal += green * green * alpha;\n        blueTotal += blue * blue * alpha;\n        alphaTotal += alpha;\n\n        count++;\n    }\n\n    return alphaTotal ? [\n        Math.round(Math.sqrt(redTotal / alphaTotal)),\n        Math.round(Math.sqrt(greenTotal / alphaTotal)),\n        Math.round(Math.sqrt(blueTotal / alphaTotal)),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction getDefaultColor(options) {\n    return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\n\nfunction getOption(options, name, defaultValue) {\n    return typeof options[name] === 'undefined' ? defaultValue : options[name];\n}\n\nconst MIN_SIZE = 10;\nconst MAX_SIZE = 100;\n\nfunction isSvg(filename) {\n    return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\n\nfunction getOriginalSize(resource) {\n    if (resource instanceof HTMLImageElement) {\n        let width = resource.naturalWidth;\n        let height = resource.naturalHeight;\n\n        // For SVG images with only viewBox attr.\n        if (!resource.naturalWidth && isSvg(resource.src)) {\n            width = height = MAX_SIZE;\n        }\n\n        return {\n            width,\n            height,\n        };\n    }\n\n    if (resource instanceof HTMLVideoElement) {\n        return {\n            width: resource.videoWidth,\n            height: resource.videoHeight\n        };\n    }\n\n    return {\n        width: resource.width,\n        height: resource.height\n    };\n}\n\nfunction prepareSizeAndPosition(originalSize, options) {\n    const srcLeft = getOption(options, 'left', 0);\n    const srcTop = getOption(options, 'top', 0);\n    const srcWidth = getOption(options, 'width', originalSize.width);\n    const srcHeight = getOption(options, 'height', originalSize.height);\n\n    let destWidth = srcWidth;\n    let destHeight = srcHeight;\n\n    if (options.mode === 'precision') {\n        return {\n            srcLeft,\n            srcTop,\n            srcWidth,\n            srcHeight,\n            destWidth,\n            destHeight\n        };\n    }\n\n    let factor;\n\n    if (srcWidth > srcHeight) {\n        factor = srcWidth / srcHeight;\n        destWidth = MAX_SIZE;\n        destHeight = Math.round(destWidth / factor);\n    } else {\n        factor = srcHeight / srcWidth;\n        destHeight = MAX_SIZE;\n        destWidth = Math.round(destHeight / factor);\n    }\n\n    if (\n        destWidth > srcWidth || destHeight > srcHeight ||\n        destWidth < MIN_SIZE || destHeight < MIN_SIZE\n    ) {\n        destWidth = srcWidth;\n        destHeight = srcHeight;\n    }\n\n    return {\n        srcLeft,\n        srcTop,\n        srcWidth,\n        srcHeight,\n        destWidth,\n        destHeight\n    };\n}\n\nfunction makeCanvas() {\n    return typeof window === 'undefined' ?\n        new OffscreenCanvas(1, 1) :\n        document.createElement('canvas');\n}\n\nconst ERROR_PREFIX = 'FastAverageColor: ';\n\nfunction outputError(options, text, details) {\n    if (!options.silent) {\n        console.error(ERROR_PREFIX + text);\n\n        if (details) {\n            console.error(details);\n        }\n    }\n}\n\nfunction getError(text) {\n    return Error(ERROR_PREFIX + text);\n}\n\nclass FastAverageColor {\n    /**\n     * Get asynchronously the average color from not loaded image.\n     *\n     * @param {string | HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n     * @param {FastAverageColorOptions} [options]\n     *\n     * @returns {Promise<FastAverageColorOptions>}\n     */\n    getColorAsync(resource, options) {\n        if (!resource) {\n            return Promise.reject(getError('call .getColorAsync() without resource.'));\n        }\n\n        if (typeof resource === 'string') {\n            const img = new Image();\n            img.crossOrigin = '';\n            img.src = resource;\n\n            return this._bindImageEvents(img, options);\n        } else if (resource instanceof Image && !resource.complete) {\n            return this._bindImageEvents(resource, options);\n        } else {\n            const result = this.getColor(resource, options);\n\n            return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n        }\n    }\n\n    /**\n     * Get the average color from images, videos and canvas.\n     *\n     * @param {HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n     * @param {FastAverageColorOptions} [options]\n     *\n     * @returns {FastAverageColorResult}\n     */\n    getColor(resource, options) {\n        options = options || {};\n\n        const defaultColor = getDefaultColor(options);\n\n        if (!resource) {\n            outputError(options, 'call .getColor(null) without resource.');\n\n            return this.prepareResult(defaultColor);\n        }\n\n        const originalSize = getOriginalSize(resource);\n        const size = prepareSizeAndPosition(originalSize, options);\n\n        if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n            outputError(options, `incorrect sizes for resource \"${resource.src}\".`);\n\n            return this.prepareResult(defaultColor);\n        }\n\n        if (!this._ctx) {\n            this._canvas = makeCanvas();\n            this._ctx = this._canvas.getContext && this._canvas.getContext('2d');\n\n            if (!this._ctx) {\n                outputError(options, 'Canvas Context 2D is not supported in this browser.');\n\n                return this.prepareResult(defaultColor);\n            }\n        }\n\n        this._canvas.width = size.destWidth;\n        this._canvas.height = size.destHeight;\n\n        let value = defaultColor;\n\n        try {\n            this._ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n            this._ctx.drawImage(\n                resource,\n                size.srcLeft, size.srcTop,\n                size.srcWidth, size.srcHeight,\n                0, 0,\n                size.destWidth, size.destHeight\n            );\n\n            const bitmapData = this._ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n            value = this.getColorFromArray4(bitmapData, options);\n        } catch (e) {\n            outputError(options, `security error (CORS) for resource ${resource.src}.\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image`, e);\n        }\n\n        return this.prepareResult(value);\n    }\n\n    /**\n     * Get the average color from a array when 1 pixel is 4 bytes.\n     *\n     * @param {number[]|Uint8Array|Uint8ClampedArray} arr\n     * @param {Object} [options]\n     * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n     * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n     * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n     * @param {number} [options.step=1]\n     *\n     * @returns {number[]} [red (0-255), green (0-255), blue (0-255), alpha (0-255)]\n     */\n    getColorFromArray4(arr, options) {\n        options = options || {};\n\n        const bytesPerPixel = 4;\n        const arrLength = arr.length;\n        const defaultColor = getDefaultColor(options);\n\n        if (arrLength < bytesPerPixel) {\n            return defaultColor;\n        }\n\n        const len = arrLength - arrLength % bytesPerPixel;\n        const step = (options.step || 1) * bytesPerPixel;\n\n        let algorithm;\n\n        switch (options.algorithm || 'sqrt') {\n            case 'simple':\n                algorithm = simpleAlgorithm;\n                break;\n            case 'sqrt':\n                algorithm = sqrtAlgorithm;\n                break;\n            case 'dominant':\n                algorithm = dominantAlgorithm;\n                break;\n            default:\n                throw getError(`${options.algorithm} is unknown algorithm.`);\n        }\n\n        return algorithm(arr, len, {\n            defaultColor,\n            ignoredColor: prepareIgnoredColor(options.ignoredColor),\n            step\n        });\n    }\n\n    /**\n     * Get color data from value ([r, g, b, a]).\n     *\n     * @param {number[]} value\n     *\n     * @returns {FastAverageColorResult}\n     */\n    prepareResult(value) {\n        const rgb = value.slice(0, 3);\n        const rgba = [].concat(rgb, value[3] / 255);\n        const isDarkColor = isDark(value);\n\n        return {\n            value,\n            rgb: 'rgb(' + rgb.join(',') + ')',\n            rgba: 'rgba(' + rgba.join(',') + ')',\n            hex: arrayToHex(rgb),\n            hexa: arrayToHex(value),\n            isDark: isDarkColor,\n            isLight: !isDarkColor\n        };\n    }\n\n    /**\n     * Destroy the instance.\n     */\n    destroy() {\n        delete this._canvas;\n        delete this._ctx;\n    }\n\n    _bindImageEvents(resource, options) {\n        return new Promise((resolve, reject) => {\n            const onload = () => {\n                unbindEvents();\n\n                const result = this.getColor(resource, options);\n\n                if (result.error) {\n                    reject(result.error);\n                } else {\n                    resolve(result);\n                }\n            };\n\n            const onerror = () => {\n                unbindEvents();\n\n                reject(getError(`Error loading image \"${resource.src}\".`));\n            };\n\n            const onabort = () => {\n                unbindEvents();\n\n                reject(getError(`Image \"${resource.src}\" loading aborted.`));\n            };\n\n            const unbindEvents = () => {\n                resource.removeEventListener('load', onload);\n                resource.removeEventListener('error', onerror);\n                resource.removeEventListener('abort', onabort);\n            };\n\n            resource.addEventListener('load', onload);\n            resource.addEventListener('error', onerror);\n            resource.addEventListener('abort', onabort);\n        });\n    }\n}\n\n/**\n * @typeof {Object} FastAverageColorOptions\n *\n * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n * @param {string} [options.mode=\"speed\"] \"precision\" or \"speed\"\n * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n * @param {number} [options.step=1]\n * @param {number} [options.left=0]\n * @param {number} [options.top=0]\n * @param {number} [options.width=width of resource]\n * @param {number} [options.height=height of resource]\n * @param {boolean} [options.silent] Disable error output via console.error\n */\n\n/**\n * @typedef {Object} FastAverageColorResult\n *\n * @property {string} rgba\n * @property {string} rgb\n * @property {string} hex\n * @property {string} hexa\n * @property {number[]} value\n * @property {boolean} isDark\n * @property {boolean} isLight\n * @property {Error?} error\n */\n\nexport default FastAverageColor;\n"],"names":["toHex","num","str","toString","length","arrayToHex","arr","map","join","isIgnoredColor","data","index","ignoredColor","i","isIgnoredColorAsNumbers","isIgnoredRGBColor","isIgnoredRGBAColor","redIgnored","greenIgnored","blueIgnored","alphaIgnored","threshold","alphaData","alphaInRange","inRange","isIgnoredRGBAColorWithThreshold","colorComponent","ignoredColorComponent","value","dominantAlgorithm","len","options","colorHash","step","max","red","green","blue","alpha","key","Math","round","redTotal","greenTotal","blueTotal","alphaTotal","count","defaultColor","simpleAlgorithm","sqrtAlgorithm","sqrt","getDefaultColor","getOption","name","defaultValue","ERROR_PREFIX","outputError","text","details","silent","console","error","getError","Error","getColorAsync","resource","Promise","reject","img","Image","crossOrigin","src","this","_bindImageEvents","complete","result","getColor","resolve","prepareResult","size","originalSize","srcLeft","srcTop","srcWidth","width","srcHeight","height","factor","destWidth","destHeight","mode","prepareSizeAndPosition","HTMLImageElement","naturalWidth","naturalHeight","search","HTMLVideoElement","videoWidth","videoHeight","getOriginalSize","_ctx","_canvas","window","OffscreenCanvas","document","createElement","getContext","clearRect","drawImage","bitmapData","getImageData","getColorFromArray4","e","arrLength","algorithm","color","Array","isArray","slice","rgb","rgba","concat","isDarkColor","hex","hexa","isDark","isLight","destroy","onload","unbindEvents","onerror","onabort","removeEventListener","addEventListener"],"sourceRoot":""}